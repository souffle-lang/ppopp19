# Souffle - A Datalog Compiler
# Copyright (c) 2017, The Souffle Developers. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at:
# - https://opensource.org/licenses/UPL
# - <souffle root>/licenses/SOUFFLE-UPL.txt

dnl Positive test cases for evaluating Datalog programs

POSITIVE_TEST([2sat],[example])
POSITIVE_TEST([access-policy],[example])
POSITIVE_TEST([ackermann],[example])
POSITIVE_TEST([amicable], [example])
POSITIVE_TEST([andersen],[example])
POSITIVE_TEST([array],[example])
POSITIVE_TEST([bigrams],[example])
POSITIVE_TEST([catalan],[example])
POSITIVE_TEST([cba_expr_value],[example])
POSITIVE_TEST([cellular_automata],[example])
POSITIVE_TEST([centroids],[example])
POSITIVE_TEST([circuit_eval],[example])
POSITIVE_TEST([circuit_records],[example])
POSITIVE_TEST([circuit_sat],[example])
POSITIVE_TEST([clique],[example])
POSITIVE_TEST([cliquer],[example])
POSITIVE_TEST([comp-parametrized-inherit],[example])
POSITIVE_TEST([comp-parametrized-multilvl],[example])
POSITIVE_TEST([comp-parametrized],[example])
POSITIVE_TEST([degree],[example])
POSITIVE_TEST([dfa],[example])
POSITIVE_TEST([dfa_live_vars],[example])
POSITIVE_TEST([dfa_min],[example])
POSITIVE_TEST([dfa_summary_function],[example])
POSITIVE_TEST([disconnected],[example])
POSITIVE_TEST([dnf],[example])
POSITIVE_TEST([dominance],[example])
POSITIVE_TEST([double_tree],[example])
POSITIVE_TEST([earley],[example])
POSITIVE_TEST([edit_distance],[example])
POSITIVE_TEST([equal],[example])
POSITIVE_TEST([factorial],[example])
POSITIVE_TEST([factoring],[example])
POSITIVE_TEST([family],[example])
POSITIVE_TEST([fib],[example])
POSITIVE_TEST([fib1],[example])
POSITIVE_TEST([flights],[example])
POSITIVE_TEST([flights2],[example])
POSITIVE_TEST([func],[example])
POSITIVE_TEST([game2],[example])
POSITIVE_TEST([grad],[example])
POSITIVE_TEST([graph],[example])
POSITIVE_TEST([grid],[example])
POSITIVE_TEST([highest_degree],[example])
POSITIVE_TEST([hmmer],[example])
POSITIVE_TEST([independent_body3],[example])
POSITIVE_TEST([inline_nats],[example])
POSITIVE_TEST([input_output],[example])
POSITIVE_TEST([java-pointsto],[example])
POSITIVE_TEST([josephus],[example])
POSITIVE_TEST([k-permutations],[example])
POSITIVE_TEST([linksum],[example])
NEGATIVE_TEST([longest_path], [example])
POSITIVE_TEST([lubm],[example])
POSITIVE_MULTI_TEST([lucas],[example],[[fibonacci], [lucas], [mersenne], [pell]])
POSITIVE_TEST([magic_access-policy],[example])
POSITIVE_TEST([magic_prime2],[example])
POSITIVE_TEST([magic_pointsto],[example])
POSITIVE_TEST([metro],[example])
POSITIVE_TEST([minesweeper],[example])
POSITIVE_TEST([minpath1],[example])
POSITIVE_TEST([minpath2],[example])
POSITIVE_TEST([mmult],[example])
POSITIVE_TEST([movies],[example])
POSITIVE_MULTI_TEST([nfsa2fsa],[example], [[ex1], [ex2]])
POSITIVE_TEST([not_match],[example])
POSITIVE_TEST([nqueens],[example])
POSITIVE_TEST([orbits1],[example])
POSITIVE_TEST([orbits],[example])
POSITIVE_TEST([palindrome],[example])
POSITIVE_TEST([paths],[example])
POSITIVE_TEST([perfect_numbers],[example])
POSITIVE_TEST([planar],[example])
POSITIVE_TEST([po1],[example])
POSITIVE_TEST([po2],[example])
POSITIVE_TEST([po3],[example])
POSITIVE_TEST([po4],[example])
POSITIVE_TEST([po5],[example])
POSITIVE_TEST([pointsto],[example])
POSITIVE_TEST([prime2],[example])
POSITIVE_TEST([prime],[example])
POSITIVE_TEST([profile_default],[example])
POSITIVE_TEST([profile_json],[example])
POSITIVE_TEST([puzzle],[example])
POSITIVE_TEST([ranpo],[example])
POSITIVE_TEST([recipes],[example])
POSITIVE_TEST([rsg],[example])
POSITIVE_TEST([sequences],[example])
POSITIVE_TEST([ship],[example])
POSITIVE_TEST([shortest_edges],[example])
POSITIVE_TEST([shortest_path],[example])
POSITIVE_TEST([small],[example])
POSITIVE_TEST([speed],[example])
POSITIVE_TEST([strategies],[example])
POSITIVE_TEST([tak],[example])
POSITIVE_TEST([tc],[example])
POSITIVE_TEST([tic-tac-toe],[example])
POSITIVE_TEST([topological_ordering],[example])
POSITIVE_TEST([traffic],[example])
POSITIVE_TEST([trains],[example])
POSITIVE_TEST([trans],[example])
POSITIVE_TEST([tree],[example])
POSITIVE_TEST([triangle],[example])
POSITIVE_TEST([weighted_distances],[example])
